# See https://aka.ms/yaml for documentation

trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

jobs:


#################################################################################


- job: 'qa'
  displayName: 'Q&A'
  timeoutInMinutes: 5
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
  - bash: |
      set -eux
      python --version
      pip install pre-commit
    displayName: 'Bootstrap'
  - bash: |
      pre-commit run --all-files --show-diff-on-failure
    displayName: 'Pre-commit hooks check'


#################################################################################


- job: 'Windows'
  timeoutInMinutes: 60
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      "64bits":
        PLATFORM: 'windows-64'
        python.arch: 'x64'
        vs.arch: 'amd64'
      "32bits":
        PLATFORM: 'windows-32'
        python.arch: 'x86'
        vs.arch: 'x86'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: '$(python.arch)'
  - bash: |
      set -eux
      python --version
      pip install -U pip
      pip install -r requirements.txt
    displayName: 'Setup venv'
  - bash: |
      set -eux
      scons platform='$(PLATFORM)' MSVC_USE_SCRIPT=true TARGET_ARCH='$(vs.arch)' sample=true CC=cl.exe build
    displayName: 'Build project'
  # - bash: |
  #     set -eux
  #     scons platform='$(PLATFORM)' MSVC_USE_SCRIPT=true TARGET_ARCH='$(vs.arch)' sample=true CC=cl.exe tests
  #   displayName: 'Run tests'
  - bash: |
      python -c "import shutil; shutil.make_archive('$(Pipeline.Workspace)/godot-python-$(git describe --tag)-$(PLATFORM)', 'zip', root_dir='build/dist')"
    displayName: 'Generate artifact archive'
  - publish: $(Agent.TempDirectory)/
    artifact: $(PLATFORM)_build


#################################################################################


- job: 'Linux'
  timeoutInMinutes: 60
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    CC: clang
    PLATFORM: 'x11-64'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
  - bash: |
      set -eux
      $CC --version
      python --version
      pip install -U pip
      pip install -r requirements.txt
    displayName: 'Setup venv'
  - bash: |
      set -eux
      scons platform='$(PLATFORM)' sample=true CC=$CC build
    displayName: 'Build project'
  # - bash: |
  #     set -eux
  #     scons platform='$(PLATFORM)' sample=true CC=$CC tests
  #   displayName: 'Run tests'
  - bash: |
      python -c "import shutil; shutil.make_archive('$(Pipeline.Workspace)/godot-python-$(git describe --tag)-$(PLATFORM)', 'zip', root_dir='build/dist')"
    displayName: 'Generate artifact archive'
  - publish: $(Agent.TempDirectory)/
    artifact: $(PLATFORM)_build


#################################################################################


- job: 'macOS'
  timeoutInMinutes: 60
  pool:
    vmImage: 'macOS-latest'
  variables:
    CC: clang
    PLATFORM: 'osx-64'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
  - bash: |
      set -eux
      $CC --version
      python --version
      brew update
      brew install zlib openssl
      pip install -U pip
      pip install -r requirements.txt
    displayName: 'Setup venv'
  - bash: |
      set -eux
      export EXTRA_CFLAGS="-I$(brew --prefix zlib)/include -I$(brew --prefix openssl)/include"
      export EXTRA_LDFLAGS="-L$(brew --prefix zlib)/lib -L$(brew --prefix openssl)/lib"
      scons platform='$(PLATFORM)' CFLAGS="$EXTRA_CFLAGS" LINKFLAGS="$EXTRA_LDFLAGS" sample=true CC=$CC build
    displayName: 'Build project'
  # - bash: |
  #     set -eux
  #     export EXTRA_CFLAGS="-I$(brew --prefix zlib)/include -I$(brew --prefix openssl)/include"
  #     export EXTRA_LDFLAGS="-L$(brew --prefix zlib)/lib -L$(brew --prefix openssl)/lib"
  #     scons platform='$(PLATFORM)' CFLAGS="$EXTRA_CFLAGS" LINKFLAGS="$EXTRA_LDFLAGS" sample=true CC=$CC tests
    # displayName: 'Run tests'
  - bash: |
      python -c "import shutil; shutil.make_archive('$(Pipeline.Workspace)/godot-python-$(git describe --tag)-$(PLATFORM)', 'zip', root_dir='build/dist')"
    displayName: 'Generate artifact archive'
  - publish: $(Agent.TempDirectory)/
    artifact: $(PLATFORM)_build
