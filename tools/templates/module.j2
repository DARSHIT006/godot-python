{% from 'class.j2' import render_class -%}
{% from 'singleton.j2' import render_singleton -%}

# AUTOGENERATED by tools/generate_godot_bindings_module.py

from pythonscriptcffi import ffi, lib

# Republishing builtins
from godot.vector2 import Vector2
from godot.rect2 import Rect2
from godot.vector3 import Vector3
from godot.transform2d import Transform2D
from godot.plane import Plane
from godot.quat import Quat
from godot.aabb import AABB
from godot.basis import Basis
from godot.transform import Transform
from godot.color import Color
from godot.node_path import NodePath
from godot.rid import RID
from godot.dictionary import Dictionary
from godot.array import Array
from godot.pool_arrays import (
    PoolByteArray,
    PoolIntArray,
    PoolRealArray,
    PoolStringArray,
    PoolVector2Array,
    PoolVector3Array,
    PoolColorArray,
)


__GODOT_API_VERSION__ = '{{ godot_api_version }}'


_instance = lib.godot_global_get_singleton(b"ClassDB")
_meth_instance = lib.godot_method_bind_get_method(b"_ClassDB", b"instance")
_meth_get_class_list = lib.godot_method_bind_get_method(
    b"_ClassDB", b"get_class_list"
)
_meth_get_method_list = lib.godot_method_bind_get_method(
    b"_ClassDB", b"class_get_method_list"
)
_meth_get_parent_class = lib.godot_method_bind_get_method(
    b"_ClassDB", b"get_parent_class"
)
_meth_get_property_list = lib.godot_method_bind_get_method(
    b"_ClassDB", b"class_get_property_list"
)
_meth_get_property = lib.godot_method_bind_get_method(
    b"_ClassDB", b"class_get_property"
)
_meth_set_property = lib.godot_method_bind_get_method(
    b"_ClassDB", b"class_set_property"
)
_meth_get_integer_constant_list = lib.godot_method_bind_get_method(
    b"_ClassDB", b"class_get_integer_constant_list"
)
_meth_get_integer_constant = lib.godot_method_bind_get_method(
    b"_ClassDB", b"class_get_integer_constant"
)


# Classes
{% for cls in classes %}

{% if cls.singleton %}
{{ render_singleton(cls) }}
{% else %}
{{ render_class(cls) }}
{% endif %}

{% endfor %}


# Globals constants
{% for constant_name, constant_value in constants.items() %}
{{ constant_name | fix_name }} = {{ constant_value }}
{%- endfor %}


# Singletons
{% for singleton in singletons %}
{{ render_singleton(singleton) }}
{%- endfor -%}
