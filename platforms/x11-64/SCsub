from __future__ import print_function
import os, glob, shutil
from SCons.Errors import UserError


Import("env")


env["bits"] = "64"
env.Append(CFLAGS="-m64")
env.Append(LINKFLAGS="-m64")


### Godot binary (to run tests) ###


if not env["godot_binary"]:
    env["godot_binary"] = File("godot.x11.opt.debug.64")
    env.Command(
        env["godot_binary"],
        None,
        "curl -L %s/godot.x11.opt.debug.64 -o ${TARGET} && chmod 750 ${TARGET}"
        % env["godot_release_base_url"],
    )
    env.NoClean(env["godot_binary"])


### Python interpreter ###

cpython_src = Dir("cpython")
env.Command(
    cpython_src,
    None,
    "git clone https://github.com/python/cpython.git --depth=1 --branch=v3.7.1 --single-branch ${TARGET}",
)
env.NoClean(cpython_src)

cpython_build = Dir("cpython_build")
# TODO: allow to compile cpython with `--with-pydebug` ?
# Compile CPython and install cffi through pip
env.Command(
    cpython_build,
    cpython_src,
    "cd ${SOURCE} && " + "echo Configuring CPython... && "
    "1>/dev/null ./configure --enable-shared --prefix=${TARGET.get_abspath()} --with-openssl=/usr && "
    + "echo Building CPython... && "
    "1>/dev/null make -j4 && "
    + "echo Installing CPython in ${TARGET.get_abspath()}... && "
    "1>/dev/null make install && "
    + "LD_LIBRARY_PATH=${TARGET.get_abspath()}/lib ${TARGET.get_abspath()}/bin/pip3 install cffi",
)
env.NoClean(cpython_build)


def generate_build_dir(target, source, env):
    target = target[0]
    cpython_build = source[0]
    libpythonscript = source[1]
    godot_module = source[2]
    _godot_module = source[3]

    if os.path.isdir(target.path):
        shutil.rmtree(target.path)
    os.mkdir(target.path)

    def c(subpath=""):
        return os.path.join(cpython_build.abspath, *subpath.split("/"))

    def p(subpath=""):
        return os.path.join(target.abspath, "pythonscript", *subpath.split("/"))

    os.mkdir(p())

    shutil.copy(libpythonscript.path, p())
    open(p(".gdignore"), "w").close()

    if os.path.isdir(c("include")):
        # Windows build of CPython doesn't contain include dir
        shutil.copytree(c("include"), p("include"))

    # Remove __pycache__ to save lots of space
    for root, dirs, files in os.walk(c("lib")):
        if "__pycache__" in dirs:
            shutil.rmtree(os.path.join(root, "__pycache__"))

    shutil.copytree(c("bin"), p("bin"))

    shutil.copytree(c("lib"), p("lib"))
    if env["compressed_stdlib"]:
        shutil.move(p("lib/python3.7"), p("lib/tmp_python3.7"))
        os.mkdir(p("lib/python3.7"))
        shutil.move(p("lib/tmp_python3.7/lib-dynload"), p("lib/python3.7/lib-dynload"))
        shutil.move(
            p("lib/tmp_python3.7/site-packages"), p("lib/python3.7/site-packages")
        )
        shutil.make_archive(
            base_name=p("lib/python37"), format="zip", root_dir=p("lib/tmp_python3.7")
        )
        shutil.rmtree(p("lib/tmp_python3.7"))

    if env["dev_dyn"]:
        os.symlink(_godot_module.abspath, p("lib/python3.7/site-packages/"))
        os.symlink(godot_module.abspath, p("lib/python3.7/site-packages/godot"))
    else:
        shutil.copy(_godot_module.path, p("lib/python3.7/site-packages/"))
        os.mkdir(p("lib/python3.7/site-packages/godot"))
        for src in (
            godot_module.glob("*.py")
            + godot_module.glob("*.so")
            + godot_module.glob("*.pxd")
        ):
            shutil.copy(src.abspath, p("lib/python3.7/site-packages/godot"))
        # shutil.copytree(godot_module.path, p("lib/python3.7/site-packages/godot"))

    if "generate_build_dir_hook" in env:
        env["generate_build_dir_hook"](target.abspath)


env["generate_build_dir"] = generate_build_dir
env["backend_dir"] = cpython_build
env.Append(CFLAGS="-DBACKEND_CPYTHON")
env.Append(CFLAGS="-I %s/include/python3.7m/" % cpython_build.path)
env.Append(LIBPATH="%s/lib" % cpython_build.path)
env.Append(LIBS=["python3.7m"])
env.Append(LINKFLAGS=["-Wl,-rpath,'$$ORIGIN/lib'"])
